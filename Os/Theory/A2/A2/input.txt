1 1 5 0
2 2 3 0
3 3 1 0
4 4 2 0
5 5 4 0

//This task involves implementing several different process scheduling algorithms.The scheduler
//will be assigned a predefined set of tasksand will schedule the tasks based on the selected
//scheduling algorithm.Each task is assigned a priorityand CPU burst.The following scheduling
//algorithms will be implemented :
//1. Priority scheduling, which schedules tasks based on priority.
//2. Shortest job first, which schedules tasks based on the length of the CPU burst. Non - preemptive version.
//3. Round robin, which schedules tasks in a round robin fashion.

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <queue>
#include <iterator>

using namespace std;

//Task class
class Task
{
public:
	int priority;
	int burst;
	int id;
	Task(int p, int b, int i) : priority(p), burst(b), id(i) {}
};

//Task comparator for priority queue
class TaskComparator
{
public:
	bool operator()(Task* t1, Task* t2)
	{
		return t1->priority > t2->priority;
	}
};

//Task comparator for priority queue
class TaskComparatorSJF
{
public:
	bool operator()(Task* t1, Task* t2)
	{
		return t1->burst > t2->burst;
	}
};

//Task comparator for priority queue
class TaskComparatorRR
{
public:
	bool operator()(Task* t1, Task* t2)
	{
		return t1->id > t2->id;
	}
};

//Scheduler class
class Scheduler
{
public:
	//Priority scheduling
	void priorityScheduling(vector<Task*> tasks)
	{
		//Priority queue
		priority_queue<Task*, vector<Task*>, TaskComparator> pq;
		//Add tasks to priority queue
		for (int i = 0; i < tasks.size(); i++)
		{
			pq.push(tasks[i]);
		}
		//Print tasks in order
		while (!pq.empty())
		{
			Task* t = pq.top();
			pq.pop();
			cout << "Task " << t->id << " priority " << t->priority << " burst " << t->burst << endl;
		}
	}

	//Shortest job first scheduling
	void shortestJobFirstScheduling(vector<Task*> tasks)
	{
		//Priority queue
		priority_queue<Task*, vector<Task*>, TaskComparatorSJF> pq;
		//Add tasks to priority queue
		for (int i = 0; i < tasks.size(); i++)
		{
			pq.push(tasks[i]);
		}
		//Print tasks in order
		while (!pq.empty())
		{
			Task* t = pq.top();
			pq.pop();
			cout << "Task " << t->id << " priority " << t->priority << " burst " << t->burst << endl;
		}
	}

	//Round robin scheduling
	void roundRobinScheduling(vector<Task*> tasks, int quantum)
	{
		//Priority queue
		priority_queue<Task*, vector<Task*>, TaskComparatorRR> pq;
		//Add tasks to priority queue
		for (int i = 0; i < tasks.size(); i++)
		{
			pq.push(tasks[i]);
		}
		//Print tasks in order
		while (!pq.empty())
		{
			Task* t = pq.top();
			pq.pop();
			cout << "Task " << t->id << " priority " << t->priority << " burst " << t->burst << endl;
		}
	}
};

int main()
{
	//Read file
	ifstream file("input.txt");
	string line;
	vector<Task*> tasks;
	int i = 0;
	while (getline(file, line))
	{
		//Split line
		string delimiter = " ";
		size_t pos = 0;
		string token;
		vector<string> tokens;
		while ((pos = line.find(delimiter)) != string::npos)
		{
			token = line.substr(0, pos);
			tokens.push_back(token);
			line.erase(0, pos + delimiter.length());
		}
		tokens.push_back(line);
		//Create task
		Task* t = new Task(stoi(tokens[0]), stoi(tokens[1]), i);
		tasks.push_back(t);
		i++;
	}
	//Create scheduler
	Scheduler* s = new Scheduler();
	//Priority scheduling
	cout << "Priority scheduling" << endl;
	s->priorityScheduling(tasks);
	//Shortest job first scheduling
	cout << "Shortest job first scheduling" << endl;
	s->shortestJobFirstScheduling(tasks);
	//Round robin scheduling
	cout << "Round robin scheduling" << endl;
	s->roundRobinScheduling(tasks, 2);
	return 0;
}
